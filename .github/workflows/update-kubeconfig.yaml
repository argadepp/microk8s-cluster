name: Create Control Plane
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Select the action
        options:
          - apply
          - destroy
          - refresh    
      region:
        type: choice
        description: Select the region
        options:
          - ap-south-1
          - us-east-1
          - ap-east-1
      product:
        description: Product
        default: DevOpsTech
      environment:
        type: choice
        description: environment
        default: dev 
        options:
          - dev
          - qa
          - stage
          - prod
      InstanceType:
        type: choice
        description: Select the instance type
        options:
          - t2.medium
          - t3.xlarge
          - t3.medium
          - t2.large
      minsize:
        type: number
        description: Min size of ASG  
        default: 1
      desiresize:
        type: number
        description: Desired size of ASG 
        default: 1
      maxsize:
        type: number
        description: Max size of ASG   
        default: 5 
      zones:
        type: string
        description: Zones for ASGs (comma-separated)                       
jobs:
  tf_fmt:
    name: Create Masterplane
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
    - name: Get the keyfile
      run: |
        echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_rsa
        chmod 600 /home/runner/.ssh/id_rsa
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::637423592422:role/git-action-deploy-role
        aws-region: ap-south-1       

    - name: Find the ip
      id: get-ip
      run: |
         IP=(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ inputs.product }}-${{ inputs.environment }}-cluster" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
         echo "IP is $IP"
         echo "::set-output name=ec2_ip::$INSTANCE_IP"
    - name: Run script on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.ec2_ip }} 'bash -s' < ./scripts/updatetheip.sh ${{ steps.get-ip.outputs.ec2_ip }}      

