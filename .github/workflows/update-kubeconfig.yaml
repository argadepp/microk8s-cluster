name: Update the configs
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Select the action
        options:
          - apply
          - destroy
          - refresh    
      region:
        type: choice
        description: Select the region
        options:
          - ap-south-1
          - us-east-1
          - ap-east-1
      product:
        description: Product
        default: DevOpsTech
      environment:
        type: choice
        description: environment
        default: dev 
        options:
          - dev
          - qa
          - stage
          - prod
                      
jobs:
  tf_fmt:
    name: Update the configs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
    - name: Get the keyfile
      run: |
        mkdir -p /home/runner/.ssh
        echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_rsa
        chmod 600 /home/runner/.ssh/id_rsa
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::637423592422:role/git-action-deploy-role
        aws-region: ap-south-1       

    - name: Find the ip
      id: get-ip
      run: |
         IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=${{ inputs.product }}-${{ inputs.environment }}-cluster" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
         echo "IP is $IP"
         echo "::set-output name=ec2_ip::$IP"
    # - name: Run script on EC2
    #   run: |
    #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.ec2_ip }} 'sudo bash -s' < ./scripts/updatetheip.sh ${{ steps.get-ip.outputs.ec2_ip }}      

    - name: Generate MicroK8s Join Command
      id: generate-join
      run: |
        JOIN_COMMAND=$(ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.ec2_ip }}  "sudo microk8s add-node --token-ttl 604800")
        # Extract only the join command with --worker
        JOIN_COMMAND_WORKER=$(echo "$JOIN_OUTPUT" | grep -- '--worker' | awk '{print $1, $2, $3}')
        
        # Debug output
        echo "Join Command with --worker: $JOIN_COMMAND_WORKER"
        
        # Export join command to use directly
        echo "JOIN_COMMAND_WORKER=${JOIN_COMMAND_WORKER}" >> $GITHUB_ENV

    - name: Find the Slaves
      id: get-slaveip
      run: |
        SLAVE_IPS=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=${{ inputs.product }}-${{ inputs.environment }}-ec2" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "Slave IPs: $SLAVE_IPS"
        echo "::set-output name=slave_ips::$SLAVE_IPS"

    - name: Execute Join Command on All Servers
      run: |
        JOIN_COMMAND_WORKER=${{ env.JOIN_COMMAND_WORKER }}
        for IP in ${{ steps.get-slaveip.outputs.slave_ips }}; do
          echo "Executing on $IP with command: ${JOIN_COMMAND_WORKER}"
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@$IP "sudo ${JOIN_COMMAND_WORKER}" &
        done
        wait